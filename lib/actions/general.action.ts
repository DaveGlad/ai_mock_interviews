"use server";

import { generateObject } from "ai";
import { google } from "@ai-sdk/google";

import { db } from "@/firebase/admin";
import { feedbackSchema } from "@/constants";

export async function createFeedback(params: CreateFeedbackParams) {
  const { interviewId, userId, transcript, feedbackId } = params;

  try {
    const formattedTranscript = transcript
      .map(
        (sentence: { role: string; content: string }) =>
          `- ${sentence.role}: ${sentence.content}\n`,
      )
      .join("");

    const { object } = await generateObject({
      model: google("gemini-2.0-flash-001", {
        structuredOutputs: false,
      }),
      schema: feedbackSchema,
      prompt: `
         Vous √™tes un expert en pr√©paration aux entretiens Campus France. Votre r√¥le est d‚Äô√©valuer la performance du candidat tout en lui fournissant des corrections et des conseils pour am√©liorer ses r√©ponses. Vous ne vous contentez pas d‚Äôattribuer des notes, vous identifiez les points faibles et proposez des solutions concr√®tes pour l‚Äôaider √† s‚Äôam√©liorer.  

**Votre approche :**  
- Analysez les r√©ponses du candidat avec pr√©cision.  
- Identifiez les points forts et les lacunes dans son discours.  
- Expliquez les erreurs et proposez des conseils pour qu‚Äôil puisse mieux structurer ses r√©ponses.  
- Exigez que le candidat **prenne des notes** apr√®s chaque correction afin qu‚Äôil puisse progresser.  

### **üìå Transcription de l‚Äôentretien :**  
${formattedTranscript}  

### **üìä √âvaluation et conseils d‚Äôam√©lioration**  
Veuillez attribuer une note entre **0 et 100** pour chaque crit√®re, en expliquant votre √©valuation et en fournissant des recommandations concr√®tes pour chaque axe d‚Äôam√©lioration.  

1Ô∏è‚É£ **Coh√©rence du projet**  
- Le projet d‚Äô√©tudes est-il bien construit et en ad√©quation avec le parcours acad√©mique et professionnel du candidat ?  
- Le choix de la formation et des √©tablissements est-il justifi√© et pertinent ?  
- Le candidat montre-t-il une r√©flexion approfondie sur son avenir ?  
üí° **Si le projet manque de coh√©rence, expliquez-lui comment mieux articuler ses choix et les rendre plus convaincants.**  

2Ô∏è‚É£ **Connaissance du syst√®me fran√ßais**  
- Le candidat comprend-il bien le fonctionnement du syst√®me √©ducatif fran√ßais ?  
- Conna√Æt-il en d√©tail les √©tablissements et formations qu‚Äôil vise ?  
- A-t-il une id√©e pr√©cise des exigences et des opportunit√©s offertes par le syst√®me fran√ßais ?  
üí° **S‚Äôil montre des lacunes, indiquez-lui les points essentiels qu‚Äôil doit approfondir.**  

3Ô∏è‚É£ **Motivation et pr√©paration**  
- Le candidat a-t-il effectu√© des recherches approfondies sur sa formation et sa future vie en France ?  
- Son choix de la France est-il justifi√© de mani√®re solide et argument√©e ?  
- A-t-il une bonne pr√©paration linguistique et culturelle ?  
üí° **Si sa motivation semble faible ou mal exprim√©e, guidez-le pour mieux structurer ses arguments.**  

4Ô∏è‚É£ **Viabilit√© financi√®re**  
- Son plan de financement est-il r√©aliste et d√©taill√© ?  
- A-t-il une id√©e pr√©cise des co√ªts de la vie et des ressources dont il dispose ?  
- Sait-il expliquer comment il couvrira ses d√©penses (frais de scolarit√©, logement, alimentation) ?  
üí° **S‚Äôil ne sait pas r√©pondre clairement, donnez-lui des pistes pour mieux pr√©senter son dossier financier.**  

5Ô∏è‚É£ **Expression et clart√©**  
- S'exprime-t-il de mani√®re fluide et bien structur√©e ?  
- Ses r√©ponses sont-elles claires, convaincantes et sans ambigu√Øt√© ?  
- Son discours est-il logique et bien organis√© ?  
üí° **Si son expression est confuse ou trop h√©sitante, donnez-lui des conseils sur la mani√®re d‚Äôam√©liorer son aisance orale.**  

### **üéØ Bilan et plan d‚Äôam√©lioration**  
- Quels sont les **points forts** du candidat ?  
- Quelles sont ses **faiblesses majeures** et comment peut-il les corriger ?  
- Quelles sont les **trois actions prioritaires** qu‚Äôil doit mettre en place pour √™tre pr√™t pour son entretien r√©el ?  

‚ö†Ô∏è **Rappelez toujours au candidat de prendre des notes** apr√®s chaque retour afin d‚Äôancrer ses apprentissages et √©viter les m√™mes erreurs lors de son v√©ritable entretien.  

        `,
      system:
        "Vous √™tes un expert en pr√©paration aux entretiens Campus France. Votre mission est d‚Äô√©valuer le candidat selon les crit√®res officiels de Campus France, tout en lui fournissant des retours constructifs pour am√©liorer ses r√©ponses. Vous ne vous contentez pas d‚Äôanalyser : vous identifiez les points faibles, expliquez les erreurs et proposez des solutions concr√®tes pour l‚Äôaider √† progresser. Votre objectif est que le candidat soit parfaitement pr√©par√© pour r√©ussir son entretien r√©el.",
    });

    const feedback = {
      interviewId: interviewId,
      userId: userId,
      totalScore: object.totalScore,
      categoryScores: object.categoryScores,
      strengths: object.strengths,
      areasForImprovement: object.areasForImprovement,
      finalAssessment: object.finalAssessment,
      createdAt: new Date().toISOString(),
    };

    let feedbackRef;

    if (feedbackId) {
      feedbackRef = db.collection("feedback").doc(feedbackId);
    } else {
      feedbackRef = db.collection("feedback").doc();
    }

    await feedbackRef.set(feedback);

    return { success: true, feedbackId: feedbackRef.id };
  } catch (error) {
    console.error("Error saving feedback:", error);
    return { success: false };
  }
}

export async function getInterviewById(id: string): Promise<Interview | null> {
  const interview = await db.collection("interviews").doc(id).get();

  return interview.data() as Interview | null;
}

export async function getFeedbackByInterviewId(
  params: GetFeedbackByInterviewIdParams,
): Promise<Feedback | null> {
  const { interviewId, userId } = params;

  const querySnapshot = await db
    .collection("feedback")
    .where("interviewId", "==", interviewId)
    .where("userId", "==", userId)
    .limit(1)
    .get();

  if (querySnapshot.empty) return null;

  const feedbackDoc = querySnapshot.docs[0];
  return { id: feedbackDoc.id, ...feedbackDoc.data() } as Feedback;
}

export async function getLatestInterviews(
  params: GetLatestInterviewsParams,
): Promise<Interview[] | null> {
  const { userId, limit = 20 } = params;

  const interviews = await db
    .collection("interviews")
    .orderBy("createdAt", "desc")
    .where("finalized", "==", true)
    .where("userId", "!=", userId)
    .limit(limit)
    .get();

  return interviews.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  })) as Interview[];
}

export async function getInterviewsByUserId(
  userId: string,
): Promise<Interview[] | null> {
  const interviews = await db
    .collection("interviews")
    .where("userId", "==", userId)
    .orderBy("createdAt", "desc")
    .get();

  return interviews.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  })) as Interview[];
}
